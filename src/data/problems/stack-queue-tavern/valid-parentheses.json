{
  "id": "valid-parentheses",
  "title": "Valid Parentheses",
  "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
  "difficulty": "easy",
  "category": "Stack & Queue Tavern",
  "starterCode": {
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n  // Your code here\n}",
    "python": "def is_valid(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Your code here\n    pass"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n  const stack = [];\n  const map = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n  };\n  \n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    \n    // If it's an opening bracket, push to stack\n    if (map[char]) {\n      stack.push(char);\n    } else {\n      // It's a closing bracket\n      const lastBracket = stack.pop();\n      \n      // Check if matching bracket\n      if (map[lastBracket] !== char) {\n        return false;\n      }\n    }\n  }\n  \n  // Stack should be empty if all brackets matched\n  return stack.length === 0;\n}",
    "python": "def is_valid(s):\n    stack = []\n    mapping = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    \n    for char in s:\n        # If it's an opening bracket, push to stack\n        if char in mapping:\n            stack.append(char)\n        else:\n            # It's a closing bracket\n            if not stack:\n                return False\n            \n            last_bracket = stack.pop()\n            \n            # Check if matching bracket\n            if mapping[last_bracket] != char:\n                return False\n    \n    # Stack should be empty if all brackets matched\n    return len(stack) == 0"
  },
  "constraints": [
    "1 <= s.length <= 10^4",
    "s consists of parentheses only '()[]{}'."
  ],
  "examples": [
    "Example 1:\nInput: s = \"()\"\nOutput: true",
    "Example 2:\nInput: s = \"()[]{}\"\nOutput: true",
    "Example 3:\nInput: s = \"(]\"\nOutput: false"
  ],
  "testCases": [
    {
      "input": "\"()\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"()[]{}\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"(]\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"([)]\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"{[]}\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"(({[]}))\"",
      "output": "true",
      "isHidden": true
    },
    {
      "input": "\"(()\"",
      "output": "false",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}