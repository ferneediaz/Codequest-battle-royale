{
  "id": "valid-parentheses",
  "title": "Valid Parentheses",
  "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
  "difficulty": "easy",
  "category": "Stack & Queue Tavern",
  "starterCode": {
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n  // Your code here\n}",
    "python": "def is_valid(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public boolean isValid(String s) {\n        // Your code here\n        return false;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isValid(string s) {\n        // Your code here\n        return false;\n    }\n};",
    "go": "func isValid(s string) bool {\n    // Your code here\n    return false\n}",
    "rust": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        // Your code here\n        false\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n  const stack = [];\n  const map = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n  };\n  \n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    \n    // If it's an opening bracket, push to stack\n    if (map[char]) {\n      stack.push(char);\n    } else {\n      // It's a closing bracket\n      const lastBracket = stack.pop();\n      \n      // Check if matching bracket\n      if (map[lastBracket] !== char) {\n        return false;\n      }\n    }\n  }\n  \n  // Stack should be empty if all brackets matched\n  return stack.length === 0;\n}",
    "python": "def is_valid(s):\n    stack = []\n    mapping = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    \n    for char in s:\n        # If it's an opening bracket, push to stack\n        if char in mapping:\n            stack.append(char)\n        else:\n            # It's a closing bracket\n            if not stack:\n                return False\n            \n            last_bracket = stack.pop()\n            \n            # Check if matching bracket\n            if mapping[last_bracket] != char:\n                return False\n    \n    # Stack should be empty if all brackets matched\n    return len(stack) == 0",
    "java": "class Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> map = new HashMap<>();\n        map.put('(', ')');\n        map.put('[', ']');\n        map.put('{', '}');\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            // If it's an opening bracket, push to stack\n            if (map.containsKey(c)) {\n                stack.push(c);\n            } else {\n                // It's a closing bracket\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                \n                char lastBracket = stack.pop();\n                \n                // Check if matching bracket\n                if (map.get(lastBracket) != c) {\n                    return false;\n                }\n            }\n        }\n        \n        // Stack should be empty if all brackets matched\n        return stack.isEmpty();\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> stk;\n        unordered_map<char, char> map = {\n            {'(', ')'},\n            {'[', ']'},\n            {'{', '}'}\n        };\n        \n        for (char c : s) {\n            // If it's an opening bracket, push to stack\n            if (map.find(c) != map.end()) {\n                stk.push(c);\n            } else {\n                // It's a closing bracket\n                if (stk.empty()) {\n                    return false;\n                }\n                \n                char lastBracket = stk.top();\n                stk.pop();\n                \n                // Check if matching bracket\n                if (map[lastBracket] != c) {\n                    return false;\n                }\n            }\n        }\n        \n        // Stack should be empty if all brackets matched\n        return stk.empty();\n    }\n};",
    "go": "func isValid(s string) bool {\n    stack := []rune{}\n    mapping := map[rune]rune{\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n    \n    for _, char := range s {\n        // If it's an opening bracket, push to stack\n        if _, ok := mapping[char]; ok {\n            stack = append(stack, char)\n        } else {\n            // It's a closing bracket\n            if len(stack) == 0 {\n                return false\n            }\n            \n            lastBracket := stack[len(stack)-1]\n            stack = stack[:len(stack)-1] // Pop from stack\n            \n            // Check if matching bracket\n            if mapping[lastBracket] != char {\n                return false\n            }\n        }\n    }\n    \n    // Stack should be empty if all brackets matched\n    return len(stack) == 0\n}",
    "rust": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        let mut stack: Vec<char> = Vec::new();\n        let mapping: std::collections::HashMap<char, char> = [\n            ('(', ')'),\n            ('[', ']'),\n            ('{', '}')\n        ].iter().cloned().collect();\n        \n        for c in s.chars() {\n            // If it's an opening bracket, push to stack\n            if mapping.contains_key(&c) {\n                stack.push(c);\n            } else {\n                // It's a closing bracket\n                if stack.is_empty() {\n                    return false;\n                }\n                \n                let last_bracket = stack.pop().unwrap();\n                \n                // Check if matching bracket\n                if mapping.get(&last_bracket) != Some(&c) {\n                    return false;\n                }\n            }\n        }\n        \n        // Stack should be empty if all brackets matched\n        stack.is_empty()\n    }\n}"
  },
  "constraints": [
    "1 <= s.length <= 10^4",
    "s consists of parentheses only '()[]{}'."
  ],
  "examples": [
    "Example 1:\nInput: s = \"()\"\nOutput: true",
    "Example 2:\nInput: s = \"()[]{}\"\nOutput: true",
    "Example 3:\nInput: s = \"(]\"\nOutput: false"
  ],
  "testCases": [
    {
      "input": "\"()\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"()[]{}\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"(]\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"([)]\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"{[]}\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"(({[]}))\"",
      "output": "true",
      "isHidden": true
    },
    {
      "input": "\"(()\"",
      "output": "false",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}