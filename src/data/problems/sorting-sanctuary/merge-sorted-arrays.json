{
  "id": "merge-sorted-arrays",
  "title": "Merge Sorted Arrays",
  "description": "You are given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.\n\nMerge `nums1` and `nums2` into a single array sorted in non-decreasing order.\n\nThe final sorted array should not be returned by the function, but instead be stored inside the array `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to 0 and should be ignored. `nums2` has a length of `n`.",
  "difficulty": "easy",
  "category": "Sorting Sanctuary",
  "starterCode": {
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1, m, nums2, n) {\n  // Your code here\n}",
    "python": "def merge(nums1, m, nums2, n):\n    \"\"\"\n    :type nums1: List[int]\n    :type m: int\n    :type nums2: List[int]\n    :type n: int\n    :rtype: None Do not return anything, modify nums1 in-place instead.\n    \"\"\"\n    # Your code here\n    pass"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1, m, nums2, n) {\n  let p1 = m - 1;\n  let p2 = n - 1;\n  let p = m + n - 1;\n  \n  while (p2 >= 0) {\n    if (p1 >= 0 && nums1[p1] > nums2[p2]) {\n      nums1[p] = nums1[p1];\n      p1--;\n    } else {\n      nums1[p] = nums2[p2];\n      p2--;\n    }\n    p--;\n  }\n}",
    "python": "def merge(nums1, m, nums2, n):\n    p1 = m - 1\n    p2 = n - 1\n    p = m + n - 1\n    \n    while p2 >= 0:\n        if p1 >= 0 and nums1[p1] > nums2[p2]:\n            nums1[p] = nums1[p1]\n            p1 -= 1\n        else:\n            nums1[p] = nums2[p2]\n            p2 -= 1\n        p -= 1"
  },
  "constraints": [
    "nums1.length == m + n",
    "nums2.length == n",
    "0 <= m, n <= 200",
    "1 <= m + n <= 200",
    "-10^9 <= nums1[i], nums2[j] <= 10^9"
  ],
  "examples": [
    "Example 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result is [1,2,2,3,5,6].",
    "Example 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and []. The result is [1].",
    "Example 3:\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1]. The result is [1]."
  ],
  "testCases": [
    {
      "input": "[1,2,3,0,0,0], 3, [2,5,6], 3",
      "output": "[1,2,2,3,5,6]",
      "isHidden": false
    },
    {
      "input": "[1], 1, [], 0",
      "output": "[1]",
      "isHidden": false
    },
    {
      "input": "[0], 0, [1], 1",
      "output": "[1]",
      "isHidden": false
    },
    {
      "input": "[4,5,6,0,0,0], 3, [1,2,3], 3",
      "output": "[1,2,3,4,5,6]",
      "isHidden": false
    },
    {
      "input": "[1,2,3,0,0,0,0,0], 3, [4,5,6,7,8], 5",
      "output": "[1,2,3,4,5,6,7,8]",
      "isHidden": true
    },
    {
      "input": "[1,3,5,7,0,0,0,0], 4, [2,4,6,8], 4",
      "output": "[1,2,3,4,5,6,7,8]",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
} 