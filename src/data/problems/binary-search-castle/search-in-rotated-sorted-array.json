{
  "id": "search-in-rotated-sorted-array",
  "title": "Search in Rotated Sorted Array",
  "description": "There is an integer array `nums` sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n\nGiven the array `nums` after the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.\n\nYou must write an algorithm with O(log n) runtime complexity.",
  "difficulty": "medium",
  "category": "Binary Search Castle",
  "starterCode": {
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nfunction search(nums, target) {\n  // Your code here\n}",
    "python": "def search(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nfunction search(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  \n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    \n    if (nums[mid] === target) {\n      return mid;\n    }\n    \n    // Check if left half is sorted\n    if (nums[left] <= nums[mid]) {\n      // Check if target is in the left half\n      if (nums[left] <= target && target < nums[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    } else {\n      // Right half is sorted\n      // Check if target is in the right half\n      if (nums[mid] < target && target <= nums[right]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n  \n  return -1;\n}",
    "python": "def search(nums, target):\n    left = 0\n    right = len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == target:\n            return mid\n        \n        # Check if left half is sorted\n        if nums[left] <= nums[mid]:\n            # Check if target is in the left half\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            # Right half is sorted\n            # Check if target is in the right half\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return -1"
  },
  "constraints": [
    "1 <= nums.length <= 5000",
    "-10^4 <= nums[i] <= 10^4",
    "All values of nums are unique.",
    "nums is an ascending array that is possibly rotated.",
    "-10^4 <= target <= 10^4"
  ],
  "examples": [
    "Example 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4",
    "Example 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1",
    "Example 3:\nInput: nums = [1], target = 0\nOutput: -1"
  ],
  "testCases": [
    {
      "input": "[4,5,6,7,0,1,2], 0",
      "output": "4",
      "isHidden": false
    },
    {
      "input": "[4,5,6,7,0,1,2], 3",
      "output": "-1",
      "isHidden": false
    },
    {
      "input": "[1], 0",
      "output": "-1",
      "isHidden": false
    },
    {
      "input": "[1], 1",
      "output": "0",
      "isHidden": false
    },
    {
      "input": "[3,1], 1",
      "output": "1",
      "isHidden": true
    },
    {
      "input": "[5,1,3], 5",
      "output": "0",
      "isHidden": true
    },
    {
      "input": "[4,5,6,7,8,1,2,3], 8",
      "output": "4",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}