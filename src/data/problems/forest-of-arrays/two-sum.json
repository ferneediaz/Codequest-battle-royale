{
  "id": "two-sum",
  "title": "Two Sum",
  "description": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
  "difficulty": "easy",
  "category": "Forest of Arrays",
  "starterCode": {
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n  // Your code here\n}",
    "python": "def two_sum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # Your code here\n    pass"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n  const map = new Map();\n  \n  for (let i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    \n    if (map.has(complement)) {\n      return [map.get(complement), i];\n    }\n    \n    map.set(nums[i], i);\n  }\n  \n  return [];\n}",
    "python": "def two_sum(nums, target):\n    map = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        \n        if complement in map:\n            return [map[complement], i]\n        \n        map[num] = i\n    \n    return []"
  },
  "constraints": [
    "2 <= nums.length <= 10^4",
    "-10^9 <= nums[i] <= 10^9",
    "-10^9 <= target <= 10^9",
    "Only one valid answer exists."
  ],
  "examples": [
    "Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
    "Example 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]",
    "Example 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]"
  ],
  "testCases": [
    {
      "input": "[[2,7,11,15], 9]",
      "output": "[0,1]",
      "isHidden": false
    },
    {
      "input": "[[3,2,4], 6]",
      "output": "[1,2]",
      "isHidden": false
    },
    {
      "input": "[[3,3], 6]",
      "output": "[0,1]",
      "isHidden": false
    },
    {
      "input": "[[1,2,3,4,5], 9]",
      "output": "[3,4]",
      "isHidden": false
    },
    {
      "input": "[[-1,-2,-3,-4,-5], -8]",
      "output": "[2,4]",
      "isHidden": true
    },
    {
      "input": "[[0,4,3,0], 0]",
      "output": "[0,3]",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}