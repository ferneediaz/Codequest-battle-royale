{
  "id": "maximum-product-subarray",
  "title": "Maximum Product Subarray",
  "description": "Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\n\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\nA subarray is a contiguous subsequence of the array.",
  "difficulty": "medium",
  "category": "Forest of Arrays",
  "starterCode": {
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction maxProduct(nums) {\n  // Your code here\n}",
    "python": "def max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public int maxProduct(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        // Your code here\n        return 0;\n    }\n};",
    "go": "func maxProduct(nums []int) int {\n    // Your code here\n    return 0\n}",
    "rust": "impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        // Your code here\n        0\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nfunction maxProduct(nums) {\n  if (nums.length === 0) return 0;\n  \n  let maxSoFar = nums[0];\n  let minSoFar = nums[0];\n  let result = maxSoFar;\n  \n  for (let i = 1; i < nums.length; i++) {\n    const curr = nums[i];\n    const tempMax = Math.max(curr, Math.max(maxSoFar * curr, minSoFar * curr));\n    minSoFar = Math.min(curr, Math.min(maxSoFar * curr, minSoFar * curr));\n    \n    maxSoFar = tempMax;\n    result = Math.max(result, maxSoFar);\n  }\n  \n  return result;\n}",
    "python": "def max_product(nums):\n    if not nums:\n        return 0\n        \n    max_so_far = min_so_far = result = nums[0]\n    \n    for i in range(1, len(nums)):\n        curr = nums[i]\n        temp_max = max(curr, max(max_so_far * curr, min_so_far * curr))\n        min_so_far = min(curr, min(max_so_far * curr, min_so_far * curr))\n        \n        max_so_far = temp_max\n        result = max(result, max_so_far)\n    \n    return result",
    "java": "class Solution {\n    public int maxProduct(int[] nums) {\n        if (nums.length == 0) return 0;\n        \n        int maxSoFar = nums[0];\n        int minSoFar = nums[0];\n        int result = maxSoFar;\n        \n        for (int i = 1; i < nums.length; i++) {\n            int curr = nums[i];\n            int tempMax = Math.max(curr, Math.max(maxSoFar * curr, minSoFar * curr));\n            minSoFar = Math.min(curr, Math.min(maxSoFar * curr, minSoFar * curr));\n            \n            maxSoFar = tempMax;\n            result = Math.max(result, maxSoFar);\n        }\n        \n        return result;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        if (nums.empty()) return 0;\n        \n        int maxSoFar = nums[0];\n        int minSoFar = nums[0];\n        int result = maxSoFar;\n        \n        for (int i = 1; i < nums.size(); i++) {\n            int curr = nums[i];\n            int tempMax = max(curr, max(maxSoFar * curr, minSoFar * curr));\n            minSoFar = min(curr, min(maxSoFar * curr, minSoFar * curr));\n            \n            maxSoFar = tempMax;\n            result = max(result, maxSoFar);\n        }\n        \n        return result;\n    }\n};",
    "go": "func maxProduct(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    maxSoFar := nums[0]\n    minSoFar := nums[0]\n    result := maxSoFar\n    \n    for i := 1; i < len(nums); i++ {\n        curr := nums[i]\n        \n        // Compute max of the current number, max*current, min*current\n        tempMax := max(curr, max(maxSoFar*curr, minSoFar*curr))\n        minSoFar = min(curr, min(maxSoFar*curr, minSoFar*curr))\n        \n        maxSoFar = tempMax\n        result = max(result, maxSoFar)\n    }\n    \n    return result\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}",
    "rust": "impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        if nums.is_empty() {\n            return 0;\n        }\n        \n        let mut max_so_far = nums[0];\n        let mut min_so_far = nums[0];\n        let mut result = max_so_far;\n        \n        for i in 1..nums.len() {\n            let curr = nums[i];\n            \n            let temp_max = std::cmp::max(curr, std::cmp::max(max_so_far * curr, min_so_far * curr));\n            min_so_far = std::cmp::min(curr, std::cmp::min(max_so_far * curr, min_so_far * curr));\n            \n            max_so_far = temp_max;\n            result = std::cmp::max(result, max_so_far);\n        }\n        \n        result\n    }\n}"
  },
  "constraints": [
    "1 <= nums.length <= 2 * 10^4",
    "-10 <= nums[i] <= 10",
    "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
  ],
  "examples": [
    "Example 1:\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.",
    "Example 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray."
  ],
  "testCases": [
    {
      "input": "[2,3,-2,4]",
      "output": "6",
      "isHidden": false
    },
    {
      "input": "[-2,0,-1]",
      "output": "0",
      "isHidden": false
    },
    {
      "input": "[-2]",
      "output": "-2",
      "isHidden": false
    },
    {
      "input": "[0,2]",
      "output": "2",
      "isHidden": false
    },
    {
      "input": "[-2,-3,-4]",
      "output": "12",
      "isHidden": true
    },
    {
      "input": "[2,-5,-2,-4,3]",
      "output": "24",
      "isHidden": true
    },
    {
      "input": "[-2,3,-4]",
      "output": "24",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}