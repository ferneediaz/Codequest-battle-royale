{
  "id": "valid-anagram",
  "title": "Valid Anagram",
  "description": "Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
  "difficulty": "easy",
  "category": "Hashmap Dungeons",
  "starterCode": {
    "javascript": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nfunction isAnagram(s, t) {\n  // Your code here\n}",
    "python": "def is_anagram(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: bool\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        // Your code here\n        return false;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // Your code here\n        return false;\n    }\n};",
    "go": "func isAnagram(s string, t string) bool {\n    // Your code here\n    return false\n}",
    "rust": "impl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        // Your code here\n        false\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nfunction isAnagram(s, t) {\n  // Basic validation\n  if (!s || !t || s.length !== t.length) return false;\n  \n  const count = new Array(26).fill(0); // For lowercase a-z\n  \n  for (let i = 0; i < s.length; i++) {\n    count[s.charCodeAt(i) - 97]++;\n    count[t.charCodeAt(i) - 97]--;\n  }\n  \n  return count.every(c => c === 0);\n}",
    "python": "def is_anagram(s, t):\n    if len(s) != len(t):\n        return False\n\n    count = [0] * 26\n\n    for cs, ct in zip(s, t):\n        count[ord(cs) - ord('a')] += 1\n        count[ord(ct) - ord('a')] -= 1\n\n    return all(c == 0 for c in count)",
    "java": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length()) return false;\n        \n        int[] counts = new int[26];\n        \n        // Count occurrences of each character in s\n        for (char c : s.toCharArray()) {\n            counts[c - 'a']++;\n        }\n        \n        // Decrement counts for each character in t\n        for (char c : t.toCharArray()) {\n            if (counts[c - 'a'] == 0) return false;\n            counts[c - 'a']--;\n        }\n        \n        // Check if all counts are zero\n        for (int count : counts) {\n            if (count != 0) return false;\n        }\n        \n        return true;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if (s.length() != t.length()) return false;\n        \n        unordered_map<char, int> charCount;\n        \n        // Count occurrences of each character in s\n        for (char c : s) {\n            charCount[c]++;\n        }\n        \n        // Decrement counts for each character in t\n        for (char c : t) {\n            if (charCount[c] == 0) return false;\n            charCount[c]--;\n        }\n        \n        // Check if all counts are zero\n        for (auto& pair : charCount) {\n            if (pair.second != 0) return false;\n        }\n        \n        return true;\n    }\n};",
    "go": "func isAnagram(s string, t string) bool {\n    if len(s) != len(t) {\n        return false\n    }\n    \n    charCount := make(map[rune]int)\n    \n    // Count occurrences of each character in s\n    for _, c := range s {\n        charCount[c]++\n    }\n    \n    // Decrement counts for each character in t\n    for _, c := range t {\n        if charCount[c] == 0 {\n            return false\n        }\n        charCount[c]--\n    }\n    \n    // Check if all counts are zero\n    for _, count := range charCount {\n        if count != 0 {\n            return false\n        }\n    }\n    \n    return true\n}",
    "rust": "impl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n        if s.len() != t.len() {\n            return false;\n        }\n        \n        let mut char_count = std::collections::HashMap::new();\n        \n        // Count occurrences of each character in s\n        for c in s.chars() {\n            *char_count.entry(c).or_insert(0) += 1;\n        }\n        \n        // Decrement counts for each character in t\n        for c in t.chars() {\n            if !char_count.contains_key(&c) || char_count[&c] == 0 {\n                return false;\n            }\n            *char_count.get_mut(&c).unwrap() -= 1;\n        }\n        \n        // Check if all counts are zero\n        for (_, &count) in char_count.iter() {\n            if count != 0 {\n                return false;\n            }\n        }\n        \n        true\n    }\n}"
  },
  "constraints": [
    "1 <= s.length, t.length <= 5 * 10^4",
    "s and t consist of lowercase English letters."
  ],
  "examples": [
    "Example 1:\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true",
    "Example 2:\nInput: s = \"rat\", t = \"car\"\nOutput: false"
  ],
  "testCases": [
    {
      "input": "\"anagram\", \"nagaram\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"rat\", \"car\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"a\", \"a\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"ab\", \"a\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"aacc\", \"ccac\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"listen\", \"silent\"",
      "output": "true",
      "isHidden": false
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}