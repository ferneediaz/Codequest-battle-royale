{
  "id": "group-anagrams",
  "title": "Group Anagrams",
  "description": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
  "difficulty": "medium",
  "category": "Hashmap Dungeons",
  "starterCode": {
    "javascript": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nfunction groupAnagrams(strs) {\n  // Your code here\n}",
    "python": "def group_anagrams(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: List[List[str]]\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        // Your code here\n        return {};\n    }\n};",
    "go": "func groupAnagrams(strs []string) [][]string {\n    // Your code here\n    return nil\n}",
    "rust": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        // Your code here\n        vec![]\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nfunction groupAnagrams(strs) {\n  const map = new Map();\n  \n  for (const str of strs) {\n    const sorted = str.split('').sort().join('');\n    if (!map.has(sorted)) {\n      map.set(sorted, []);\n    }\n    map.get(sorted).push(str);\n  }\n  \n  return Array.from(map.values());\n}",
    "python": "def group_anagrams(strs):\n    anagram_map = {}\n    \n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        if sorted_s not in anagram_map:\n            anagram_map[sorted_s] = []\n        anagram_map[sorted_s].append(s)\n    \n    return list(anagram_map.values())",
    "java": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> map = new HashMap<>();\n        \n        for (String s : strs) {\n            char[] chars = s.toCharArray();\n            Arrays.sort(chars);\n            String sorted = new String(chars);\n            \n            if (!map.containsKey(sorted)) {\n                map.put(sorted, new ArrayList<>());\n            }\n            map.get(sorted).add(s);\n        }\n        \n        return new ArrayList<>(map.values());\n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        unordered_map<string, vector<string>> map;\n        \n        for (string& s : strs) {\n            string sorted = s;\n            sort(sorted.begin(), sorted.end());\n            map[sorted].push_back(s);\n        }\n        \n        vector<vector<string>> result;\n        for (auto& pair : map) {\n            result.push_back(pair.second);\n        }\n        \n        return result;\n    }\n};",
    "go": "func groupAnagrams(strs []string) [][]string {\n    anagramMap := make(map[string][]string)\n    \n    for _, s := range strs {\n        // Convert string to rune slice for sorting\n        chars := []rune(s)\n        // Sort the characters\n        sort.Slice(chars, func(i, j int) bool {\n            return chars[i] < chars[j]\n        })\n        sorted := string(chars)\n        \n        // Group by sorted string\n        anagramMap[sorted] = append(anagramMap[sorted], s)\n    }\n    \n    // Convert map to result slice\n    result := make([][]string, 0, len(anagramMap))\n    for _, group := range anagramMap {\n        result = append(result, group)\n    }\n    \n    return result\n}",
    "rust": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        let mut anagram_map: std::collections::HashMap<String, Vec<String>> = std::collections::HashMap::new();\n        \n        for s in strs {\n            let mut chars: Vec<char> = s.chars().collect();\n            chars.sort_unstable();\n            let sorted: String = chars.into_iter().collect();\n            \n            anagram_map.entry(sorted).or_insert(Vec::new()).push(s);\n        }\n        \n        anagram_map.values().cloned().collect()\n    }\n}"
  },
  "constraints": [
    "1 <= strs.length <= 10^4",
    "0 <= strs[i].length <= 100",
    "strs[i] consists of lowercase English letters"
  ],
  "examples": [
    "Example 1:\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
    "Example 2:\nInput: strs = [\"\"]\nOutput: [[\"\"]]",
    "Example 3:\nInput: strs = [\"a\"]\nOutput: [[\"a\"]]"
  ],
  "testCases": [
    {
      "input": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
      "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
      "isHidden": false
    },
    {
      "input": "[\"\"]",
      "output": "[[\"\"]]",
      "isHidden": false
    },
    {
      "input": "[\"a\"]",
      "output": "[[\"a\"]]",
      "isHidden": false
    },
    {
      "input": "[\"cab\",\"tin\",\"pew\",\"duh\",\"may\",\"ill\",\"buy\",\"bar\",\"max\",\"doc\"]",
      "output": "[[\"cab\"],[\"tin\"],[\"pew\"],[\"duh\"],[\"may\"],[\"ill\"],[\"buy\"],[\"bar\"],[\"max\"],[\"doc\"]]",
      "isHidden": false
    },
    {
      "input": "[\"abc\",\"cba\",\"bac\",\"foo\",\"bar\"]",
      "output": "[[\"abc\",\"cba\",\"bac\"],[\"foo\"],[\"bar\"]]",
      "isHidden": false
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}