{
  "id": "longest-palindromic-substring",
  "title": "Longest Palindromic Substring",
  "description": "Given a string `s`, return the longest palindromic substring in `s`.\n\nA palindrome is a string that reads the same backward as forward, like \"madam\" or \"racecar\".",
  "difficulty": "medium",
  "category": "String Sorcery",
  "starterCode": {
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nfunction longestPalindrome(s) {\n  // Your code here\n}",
    "python": "def longest_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public String longestPalindrome(String s) {\n        // Your code here\n        return \"\";\n    }\n}",
    "cpp": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        // Your code here\n        return \"\";\n    }\n};",
    "go": "func longestPalindrome(s string) string {\n    // Your code here\n    return \"\"\n}",
    "rust": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        // Your code here\n        String::new()\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nfunction longestPalindrome(s) {\n  if (!s || s.length < 1) return \"\";\n  \n  let start = 0;\n  let maxLength = 1;\n  \n  function expandAroundCenter(left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      const currentLength = right - left + 1;\n      if (currentLength > maxLength) {\n        maxLength = currentLength;\n        start = left;\n      }\n      left--;\n      right++;\n    }\n  }\n  \n  for (let i = 0; i < s.length; i++) {\n    // Odd length palindromes\n    expandAroundCenter(i, i);\n    // Even length palindromes\n    expandAroundCenter(i, i + 1);\n  }\n  \n  return s.substring(start, start + maxLength);\n}",
    "python": "def longest_palindrome(s):\n    if not s:\n        return \"\"\n        \n    start = 0\n    max_length = 1\n    \n    def expand_around_center(left, right):\n        nonlocal start, max_length\n        \n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            current_length = right - left + 1\n            if current_length > max_length:\n                max_length = current_length\n                start = left\n            left -= 1\n            right += 1\n    \n    for i in range(len(s)):\n        # Odd length palindromes\n        expand_around_center(i, i)\n        # Even length palindromes\n        expand_around_center(i, i + 1)\n    \n    return s[start:start + max_length]",
    "java": "class Solution {\n    private int start = 0;\n    private int maxLength = 1;\n    \n    public String longestPalindrome(String s) {\n        if (s == null || s.length() < 1) return \"\";\n        \n        for (int i = 0; i < s.length(); i++) {\n            // Odd length palindromes\n            expandAroundCenter(s, i, i);\n            // Even length palindromes\n            expandAroundCenter(s, i, i + 1);\n        }\n        \n        return s.substring(start, start + maxLength);\n    }\n    \n    private void expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            int currentLength = right - left + 1;\n            if (currentLength > maxLength) {\n                maxLength = currentLength;\n                start = left;\n            }\n            left--;\n            right++;\n        }\n    }\n}",
    "cpp": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        if (s.empty()) return \"\";\n        \n        int start = 0;\n        int maxLength = 1;\n        \n        for (int i = 0; i < s.length(); i++) {\n            // Odd length palindromes\n            expandAroundCenter(s, i, i, start, maxLength);\n            // Even length palindromes\n            expandAroundCenter(s, i, i + 1, start, maxLength);\n        }\n        \n        return s.substr(start, maxLength);\n    }\n    \n    void expandAroundCenter(const string& s, int left, int right, int& start, int& maxLength) {\n        while (left >= 0 && right < s.length() && s[left] == s[right]) {\n            int currentLength = right - left + 1;\n            if (currentLength > maxLength) {\n                maxLength = currentLength;\n                start = left;\n            }\n            left--;\n            right++;\n        }\n    }\n};",
    "go": "func longestPalindrome(s string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    \n    start := 0\n    maxLength := 1\n    \n    // Helper function to expand around center\n    expandAroundCenter := func(left, right int) {\n        for left >= 0 && right < len(s) && s[left] == s[right] {\n            currentLength := right - left + 1\n            if currentLength > maxLength {\n                maxLength = currentLength\n                start = left\n            }\n            left--\n            right++\n        }\n    }\n    \n    for i := 0; i < len(s); i++ {\n        // Odd length palindromes\n        expandAroundCenter(i, i)\n        // Even length palindromes\n        expandAroundCenter(i, i+1)\n    }\n    \n    return s[start:start+maxLength]\n}",
    "rust": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        if s.is_empty() {\n            return String::new();\n        }\n        \n        let s_chars: Vec<char> = s.chars().collect();\n        let mut start = 0;\n        let mut max_length = 1;\n        \n        for i in 0..s_chars.len() {\n            // Odd length palindromes\n            Self::expand_around_center(&s_chars, i as i32, i as i32, &mut start, &mut max_length);\n            // Even length palindromes\n            Self::expand_around_center(&s_chars, i as i32, i as i32 + 1, &mut start, &mut max_length);\n        }\n        \n        s.chars().skip(start).take(max_length).collect()\n    }\n    \n    fn expand_around_center(s: &[char], mut left: i32, mut right: i32, start: &mut usize, max_length: &mut usize) {\n        while left >= 0 && right < s.len() as i32 && s[left as usize] == s[right as usize] {\n            let current_length = (right - left + 1) as usize;\n            if current_length > *max_length {\n                *max_length = current_length;\n                *start = left as usize;\n            }\n            left -= 1;\n            right += 1;\n        }\n    }\n}"
  },
  "constraints": [
    "1 <= s.length <= 1000",
    "s consist of only digits and English letters."
  ],
  "examples": [
    "Example 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.",
    "Example 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"",
    "Example 3:\nInput: s = \"a\"\nOutput: \"a\""
  ],
  "testCases": [
    {
      "input": "\"babad\"",
      "output": "\"bab\"",
      "isHidden": false
    },
    {
      "input": "\"cbbd\"",
      "output": "\"bb\"",
      "isHidden": false
    },
    {
      "input": "\"a\"",
      "output": "\"a\"",
      "isHidden": false
    },
    {
      "input": "\"racecar\"",
      "output": "\"racecar\"",
      "isHidden": false
    },
    {
      "input": "\"banana\"",
      "output": "\"anana\"",
      "isHidden": true
    },
    {
      "input": "\"aacabdkacaa\"",
      "output": "\"aca\"",
      "isHidden": true
    },
    {
      "input": "\"abcdefgfedcba\"",
      "output": "\"abcdefgfedcba\"",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}