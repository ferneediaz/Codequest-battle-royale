{
  "id": "valid-palindrome",
  "title": "Valid Palindrome",
  "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` if it is a palindrome, or `false` otherwise.",
  "difficulty": "easy",
  "category": "String Sorcery",
  "starterCode": {
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isPalindrome(s) {\n  // Your code here\n}",
    "python": "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public boolean isPalindrome(String s) {\n        // Your code here\n        return false;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        // Your code here\n        return false;\n    }\n};",
    "go": "func isPalindrome(s string) bool {\n    // Your code here\n    return false\n}",
    "rust": "impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n        // Your code here\n        false\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isPalindrome(s) {\n  // Convert to lowercase and remove non-alphanumeric characters\n  s = s.toLowerCase().replace(/[^a-z0-9]/g, '');\n  \n  // Check if it's a palindrome using two pointers\n  let left = 0;\n  let right = s.length - 1;\n  \n  while (left < right) {\n    if (s[left] !== s[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  \n  return true;\n}",
    "python": "def is_palindrome(s):\n    # Convert to lowercase and remove non-alphanumeric characters\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    \n    # Check if it's a palindrome\n    return s == s[::-1]",
    "java": "class Solution {\n    public boolean isPalindrome(String s) {\n        // Convert to lowercase and remove non-alphanumeric characters\n        s = s.toLowerCase().replaceAll(\"[^a-z0-9]\", \"\");\n        \n        // Check if it's a palindrome using two pointers\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        // Convert to lowercase and remove non-alphanumeric characters\n        string filtered;\n        for (char c : s) {\n            if (isalnum(c)) {\n                filtered += tolower(c);\n            }\n        }\n        \n        // Check if it's a palindrome using two pointers\n        int left = 0;\n        int right = filtered.length() - 1;\n        \n        while (left < right) {\n            if (filtered[left] != filtered[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n};",
    "go": "func isPalindrome(s string) bool {\n    // Convert to lowercase and remove non-alphanumeric characters\n    var filtered []rune\n    for _, c := range s {\n        if unicode.IsLetter(c) || unicode.IsDigit(c) {\n            filtered = append(filtered, unicode.ToLower(c))\n        }\n    }\n    \n    // Check if it's a palindrome using two pointers\n    left := 0\n    right := len(filtered) - 1\n    \n    for left < right {\n        if filtered[left] != filtered[right] {\n            return false\n        }\n        left++\n        right--\n    }\n    \n    return true\n}",
    "rust": "impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n        // Convert to lowercase and remove non-alphanumeric characters\n        let filtered: Vec<char> = s.chars()\n            .filter(|c| c.is_alphanumeric())\n            .map(|c| c.to_lowercase().next().unwrap())\n            .collect();\n        \n        // Check if it's a palindrome using two pointers\n        let mut left = 0;\n        let mut right = filtered.len();\n        \n        while left < right {\n            right -= 1; // Adjust right before comparison\n            if filtered[left] != filtered[right] {\n                return false;\n            }\n            left += 1;\n        }\n        \n        return true;\n    }\n}"
  },
  "constraints": [
    "1 <= s.length <= 2 * 10^5",
    "s consists only of printable ASCII characters."
  ],
  "examples": [
    "Example 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.",
    "Example 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.",
    "Example 3:\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome."
  ],
  "testCases": [
    {
      "input": "\"A man, a plan, a canal: Panama\"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"race a car\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\" \"",
      "output": "true",
      "isHidden": false
    },
    {
      "input": "\"0P\"",
      "output": "false",
      "isHidden": false
    },
    {
      "input": "\"Was it a car or a cat I saw?\"",
      "output": "true",
      "isHidden": true
    },
    {
      "input": "\"No 'x' in Nixon\"",
      "output": "true",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}