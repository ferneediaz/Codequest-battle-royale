{
  "id": "palindrome-substrings",
  "title": "Palindrome Substrings",
  "description": "Given a string `s`, return the number of palindromic substrings in it.\n\nA string is a palindrome when it reads the same backward as forward.\n\nA substring is a contiguous sequence of characters within the string.",
  "difficulty": "medium",
  "category": "String Sorcery",
  "starterCode": {
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nfunction countSubstrings(s) {\n  // Your code here\n}",
    "python": "def count_substrings(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public int countSubstrings(String s) {\n        // Your code here\n        return 0;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    int countSubstrings(string s) {\n        // Your code here\n        return 0;\n    }\n};",
    "go": "func countSubstrings(s string) int {\n    // Your code here\n    return 0\n}",
    "rust": "impl Solution {\n    pub fn count_substrings(s: String) -> i32 {\n        // Your code here\n        0\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nfunction countSubstrings(s) {\n  let count = 0;\n  \n  // Helper function to count palindromes centered at given indices\n  function expandAroundCenter(left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      count++;\n      left--;\n      right++;\n    }\n  }\n  \n  for (let i = 0; i < s.length; i++) {\n    // Odd length palindromes\n    expandAroundCenter(i, i);\n    // Even length palindromes\n    expandAroundCenter(i, i + 1);\n  }\n  \n  return count;\n}",
    "python": "def count_substrings(s):\n    count = 0\n    \n    def expand_around_center(left, right):\n        nonlocal count\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n    \n    for i in range(len(s)):\n        # Odd length palindromes\n        expand_around_center(i, i)\n        # Even length palindromes\n        expand_around_center(i, i + 1)\n    \n    return count",
    "java": "class Solution {\n    private int count = 0;\n    \n    public int countSubstrings(String s) {\n        if (s == null || s.length() == 0) return 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            // Odd length palindromes\n            expandAroundCenter(s, i, i);\n            // Even length palindromes\n            expandAroundCenter(s, i, i + 1);\n        }\n        \n        return count;\n    }\n    \n    private void expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            count++;\n            left--;\n            right++;\n        }\n    }\n}",
    "cpp": "class Solution {\npublic:\n    int countSubstrings(string s) {\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            // Odd length palindromes\n            expandAroundCenter(s, i, i, count);\n            // Even length palindromes\n            expandAroundCenter(s, i, i + 1, count);\n        }\n        \n        return count;\n    }\n    \n    void expandAroundCenter(const string& s, int left, int right, int& count) {\n        while (left >= 0 && right < s.length() && s[left] == s[right]) {\n            count++;\n            left--;\n            right++;\n        }\n    }\n};",
    "go": "func countSubstrings(s string) int {\n    count := 0\n    \n    // Helper function to count palindromes centered at given indices\n    expandAroundCenter := func(left, right int) {\n        for left >= 0 && right < len(s) && s[left] == s[right] {\n            count++\n            left--\n            right++\n        }\n    }\n    \n    for i := 0; i < len(s); i++ {\n        // Odd length palindromes\n        expandAroundCenter(i, i)\n        // Even length palindromes\n        expandAroundCenter(i, i + 1)\n    }\n    \n    return count\n}",
    "rust": "impl Solution {\n    pub fn count_substrings(s: String) -> i32 {\n        let s_chars: Vec<char> = s.chars().collect();\n        let mut count = 0;\n        \n        for i in 0..s_chars.len() {\n            // Odd length palindromes\n            Self::expand_around_center(&s_chars, i as i32, i as i32, &mut count);\n            // Even length palindromes\n            Self::expand_around_center(&s_chars, i as i32, i as i32 + 1, &mut count);\n        }\n        \n        count\n    }\n    \n    fn expand_around_center(s: &[char], mut left: i32, mut right: i32, count: &mut i32) {\n        while left >= 0 && right < s.len() as i32 && s[left as usize] == s[right as usize] {\n            *count += 1;\n            left -= 1;\n            right += 1;\n        }\n    }\n}"
  },
  "constraints": [
    "1 <= s.length <= 1000",
    "s consists of lowercase English letters."
  ],
  "examples": [
    "Example 1:\nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".",
    "Example 2:\nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
  ],
  "testCases": [
    {
      "input": "\"abc\"",
      "output": "3",
      "isHidden": false
    },
    {
      "input": "\"aaa\"",
      "output": "6",
      "isHidden": false
    },
    {
      "input": "\"racecar\"",
      "output": "10",
      "isHidden": false
    },
    {
      "input": "\"\"",
      "output": "0",
      "isHidden": false
    },
    {
      "input": "\"abba\"",
      "output": "6",
      "isHidden": false
    },
    {
      "input": "\"madam\"",
      "output": "7",
      "isHidden": false
    },
    {
      "input": "\"aaaaa\"",
      "output": "15",
      "isHidden": false
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}