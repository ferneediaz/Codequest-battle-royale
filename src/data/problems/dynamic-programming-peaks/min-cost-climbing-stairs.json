{
  "id": "min-cost-climbing-stairs",
  "title": "Min Cost Climbing Stairs",
  "description": "You are given an integer array `cost` where `cost[i]` is the cost of the `i`-th step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index 0, or the step with index 1.\n\nReturn the minimum cost to reach the top of the floor (beyond the last step).",
  "difficulty": "easy",
  "category": "Dynamic Programming Peaks",
  "starterCode": {
    "javascript": "/**\n * @param {number[]} cost\n * @return {number}\n */\nfunction minCostClimbingStairs(cost) {\n  // Your code here\n}",
    "python": "def min_cost_climbing_stairs(cost):\n    \"\"\"\n    :type cost: List[int]\n    :rtype: int\n    \"\"\"\n    # Your code here\n    pass",
    "java": "class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        // Your code here\n        return 0;\n    }\n}",
    "cpp": "class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        // Your code here\n        return 0;\n    }\n};",
    "go": "func minCostClimbingStairs(cost []int) int {\n    // Your code here\n    return 0\n}",
    "rust": "impl Solution {\n    pub fn min_cost_climbing_stairs(cost: Vec<i32>) -> i32 {\n        // Your code here\n        0\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * @param {number[]} cost\n * @return {number}\n */\nfunction minCostClimbingStairs(cost) {\n  const n = cost.length;\n  \n  // dp[i] represents the minimum cost to reach the i-th step\n  const dp = new Array(n);\n  \n  // Base cases\n  dp[0] = cost[0];\n  dp[1] = cost[1];\n  \n  // Fill dp array\n  for (let i = 2; i < n; i++) {\n    dp[i] = cost[i] + Math.min(dp[i-1], dp[i-2]);\n  }\n  \n  // Return the minimum cost to reach the top (beyond the last step)\n  return Math.min(dp[n-1], dp[n-2]);\n}",
    "python": "def min_cost_climbing_stairs(cost):\n    n = len(cost)\n    \n    # dp[i] represents the minimum cost to reach the i-th step\n    dp = [0] * n\n    \n    # Base cases\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    \n    # Fill dp array\n    for i in range(2, n):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    \n    # Return the minimum cost to reach the top (beyond the last step)\n    return min(dp[n-1], dp[n-2])",
    "java": "class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        \n        // dp[i] represents the minimum cost to reach the i-th step\n        int[] dp = new int[n];\n        \n        // Base cases\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        \n        // Fill dp array\n        for (int i = 2; i < n; i++) {\n            dp[i] = cost[i] + Math.min(dp[i-1], dp[i-2]);\n        }\n        \n        // Return the minimum cost to reach the top (beyond the last step)\n        return Math.min(dp[n-1], dp[n-2]);\n    }\n}",
    "cpp": "class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        \n        // dp[i] represents the minimum cost to reach the i-th step\n        vector<int> dp(n);\n        \n        // Base cases\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        \n        // Fill dp array\n        for (int i = 2; i < n; i++) {\n            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);\n        }\n        \n        // Return the minimum cost to reach the top (beyond the last step)\n        return min(dp[n-1], dp[n-2]);\n    }\n};",
    "go": "func minCostClimbingStairs(cost []int) int {\n    n := len(cost)\n    \n    // dp[i] represents the minimum cost to reach the i-th step\n    dp := make([]int, n)\n    \n    // Base cases\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    \n    // Fill dp array\n    for i := 2; i < n; i++ {\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    }\n    \n    // Return the minimum cost to reach the top (beyond the last step)\n    return min(dp[n-1], dp[n-2])\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}",
    "rust": "impl Solution {\n    pub fn min_cost_climbing_stairs(cost: Vec<i32>) -> i32 {\n        let n = cost.len();\n        \n        // dp[i] represents the minimum cost to reach the i-th step\n        let mut dp = vec![0; n];\n        \n        // Base cases\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        \n        // Fill dp array\n        for i in 2..n {\n            dp[i] = cost[i] + std::cmp::min(dp[i-1], dp[i-2]);\n        }\n        \n        // Return the minimum cost to reach the top (beyond the last step)\n        std::cmp::min(dp[n-1], dp[n-2])\n    }\n}"
  },
  "constraints": [
    "2 <= cost.length <= 1000",
    "0 <= cost[i] <= 999"
  ],
  "examples": [
    "Example 1:\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.",
    "Example 2:\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6."
  ],
  "testCases": [
    {
      "input": "[10,15,20]",
      "output": "15",
      "isHidden": false
    },
    {
      "input": "[1,100,1,1,1,100,1,1,100,1]",
      "output": "6",
      "isHidden": false
    },
    {
      "input": "[0,0,0,0]",
      "output": "0",
      "isHidden": false
    },
    {
      "input": "[1,2]",
      "output": "1",
      "isHidden": false
    },
    {
      "input": "[10,15,20,25,30]",
      "output": "40",
      "isHidden": true
    },
    {
      "input": "[1,2,3,4,5]",
      "output": "6",
      "isHidden": true
    },
    {
      "input": "[5,4,3,2,1]",
      "output": "5",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}