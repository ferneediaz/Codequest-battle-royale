{
  "id": "invert-binary-tree",
  "title": "Invert Binary Tree",
  "description": "Given the `root` of a binary tree, invert the tree, and return its root.\n\nTo invert a binary tree, swap the left and right children for each node in the tree.",
  "difficulty": "easy",
  "category": "Tree of Wisdom",
  "starterCode": {
    "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nfunction invertTree(root) {\n  // Your code here\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        # Your code here\n        pass",
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Your code here\n        return root;\n    }\n}",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // Your code here\n        return root;\n    }\n};",
    "go": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc invertTree(root *TreeNode) *TreeNode {\n    // Your code here\n    return root\n}",
    "rust": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn invert_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n        // Your code here\n        root\n    }\n}"
  },
  "solutionCode": {
    "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nfunction invertTree(root) {\n  // Base case\n  if (root === null) return null;\n  \n  // Swap the children\n  const temp = root.left;\n  root.left = root.right;\n  root.right = temp;\n  \n  // Recursively invert left and right subtrees\n  invertTree(root.left);\n  invertTree(root.right);\n  \n  return root;\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root):\n        # Base case\n        if not root:\n            return None\n        \n        # Swap the children\n        root.left, root.right = root.right, root.left\n        \n        # Recursively invert left and right subtrees\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root",
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Base case\n        if (root == null) return null;\n        \n        // Swap the children\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        \n        // Recursively invert left and right subtrees\n        invertTree(root.left);\n        invertTree(root.right);\n        \n        return root;\n    }\n}",
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // Base case\n        if (root == nullptr) return nullptr;\n        \n        // Swap the children\n        TreeNode* temp = root->left;\n        root->left = root->right;\n        root->right = temp;\n        \n        // Recursively invert left and right subtrees\n        invertTree(root->left);\n        invertTree(root->right);\n        \n        return root;\n    }\n};",
    "go": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc invertTree(root *TreeNode) *TreeNode {\n    // Base case\n    if root == nil {\n        return nil\n    }\n    \n    // Swap the children\n    temp := root.Left\n    root.Left = root.Right\n    root.Right = temp\n    \n    // Recursively invert left and right subtrees\n    invertTree(root.Left)\n    invertTree(root.Right)\n    \n    return root\n}",
    "rust": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn invert_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n        // Base case\n        if let Some(node) = root.clone() {\n            // Swap the children\n            let left = node.borrow_mut().left.take();\n            let right = node.borrow_mut().right.take();\n            \n            // Set the swapped children\n            node.borrow_mut().left = Solution::invert_tree(right);\n            node.borrow_mut().right = Solution::invert_tree(left);\n            \n            return Some(node);\n        }\n        \n        None\n    }\n}"
  },
  "constraints": [
    "The number of nodes in the tree is in the range [0, 100]",
    "-100 <= Node.val <= 100"
  ],
  "examples": [
    "Example 1:\n![Invert Binary Tree Example](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]",
    "Example 2:\n![Invert Binary Tree Example 2](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)\nInput: root = [2,1,3]\nOutput: [2,3,1]",
    "Example 3:\nInput: root = []\nOutput: []"
  ],
  "testCases": [
    {
      "input": "[4,2,7,1,3,6,9]",
      "output": "[4,7,2,9,6,3,1]",
      "isHidden": false
    },
    {
      "input": "[2,1,3]",
      "output": "[2,3,1]",
      "isHidden": false
    },
    {
      "input": "[]",
      "output": "[]",
      "isHidden": false
    },
    {
      "input": "[1]",
      "output": "[1]",
      "isHidden": false
    },
    {
      "input": "[1,2]",
      "output": "[1,null,2]",
      "isHidden": false
    },
    {
      "input": "[1,null,2]",
      "output": "[1,2]",
      "isHidden": false
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}