{
  "id": "invert-binary-tree",
  "title": "Invert Binary Tree",
  "description": "Given the `root` of a binary tree, invert the tree, and return its root.\n\nTo invert a binary tree, swap the left and right children for each node in the tree.",
  "difficulty": "easy",
  "category": "Tree of Wisdom",
  "starterCode": {
    "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nfunction invertTree(root) {\n  // Your code here\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        # Your code here\n        pass"
  },
  "solutionCode": {
    "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nfunction invertTree(root) {\n  // Base case\n  if (root === null) return null;\n  \n  // Swap the children\n  const temp = root.left;\n  root.left = root.right;\n  root.right = temp;\n  \n  // Recursively invert left and right subtrees\n  invertTree(root.left);\n  invertTree(root.right);\n  \n  return root;\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root):\n        # Base case\n        if not root:\n            return None\n        \n        # Swap the children\n        root.left, root.right = root.right, root.left\n        \n        # Recursively invert left and right subtrees\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"
  },
  "constraints": [
    "The number of nodes in the tree is in the range [0, 100]",
    "-100 <= Node.val <= 100"
  ],
  "examples": [
    "Example 1:\n![Invert Binary Tree Example](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]",
    "Example 2:\n![Invert Binary Tree Example 2](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)\nInput: root = [2,1,3]\nOutput: [2,3,1]",
    "Example 3:\nInput: root = []\nOutput: []"
  ],
  "testCases": [
    {
      "input": "[4,2,7,1,3,6,9]",
      "output": "[4,7,2,9,6,3,1]",
      "isHidden": false
    },
    {
      "input": "[2,1,3]",
      "output": "[2,3,1]",
      "isHidden": false
    },
    {
      "input": "[]",
      "output": "[]",
      "isHidden": false
    },
    {
      "input": "[1]",
      "output": "[1]",
      "isHidden": false
    },
    {
      "input": "[1,2]",
      "output": "[1,null,2]",
      "isHidden": true
    },
    {
      "input": "[1,null,2]",
      "output": "[1,2]",
      "isHidden": true
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 128000
}